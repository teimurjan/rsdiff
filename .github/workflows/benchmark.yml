name: Benchmark Tools

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  BENCHMARK_OUTPUTS_DIR: ${{ github.workspace }}/benchmark-outputs
  IMAGES_DIR: ${{ github.workspace }}/images
  HYPERFINE_VERSION: "1.19.0"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      hyperfine-cache-key: ${{ steps.hyperfine-cache.outputs.cache-hit }}
    steps:
      - name: Cache hyperfine
        id: hyperfine-cache
        uses: actions/cache@v4
        with:
          path: /tmp/hyperfine
          key: hyperfine-${{ env.HYPERFINE_VERSION }}-linux-musl

      - name: Download and install hyperfine
        if: steps.hyperfine-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/hyperfine
          curl -L "https://github.com/sharkdp/hyperfine/releases/download/v${HYPERFINE_VERSION}/hyperfine-v${HYPERFINE_VERSION}-x86_64-unknown-linux-musl.tar.gz" -o hyperfine.tar.gz
          tar -xzf hyperfine.tar.gz
          cp hyperfine-v${HYPERFINE_VERSION}-x86_64-unknown-linux-musl/hyperfine /tmp/hyperfine/
          rm -rf hyperfine.tar.gz hyperfine-v${HYPERFINE_VERSION}-x86_64-unknown-linux-musl

  benchmark-rsdiff:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache hyperfine
        uses: actions/cache@v4
        with:
          path: /tmp/hyperfine
          key: hyperfine-${{ env.HYPERFINE_VERSION }}-linux-musl

      - name: Install hyperfine
        run: sudo cp /tmp/hyperfine/hyperfine /usr/local/bin/

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build rsdiff
        run: |
          cargo build --release
          sudo cp target/release/rsdiff /usr/local/bin/

      - name: Create benchmark outputs directory
        run: mkdir -p "$BENCHMARK_OUTPUTS_DIR"

      - name: Run rsdiff benchmarks
        run: |
          echo "🏃 Running rsdiff benchmarks..."

          # Find image pairs and run benchmarks
          for img1 in "$IMAGES_DIR"/*.png "$IMAGES_DIR"/*.jpg; do
            if [[ -f "$img1" ]]; then
              base_name=$(basename "$img1" | sed 's/\.[^.]*$//')
              # Look for corresponding image with -1 suffix
              img2="$IMAGES_DIR/${base_name%-1}.png"
              if [[ -f "$img2" && "$img1" != "$img2" ]]; then
                pair_name="$(basename "${img1%.*}")_vs_$(basename "${img2%.*}")"
                echo "Benchmarking: $pair_name"
                
                hyperfine -i \
                  --warmup 3 \
                  --min-runs 50 \
                  --max-runs 100 \
                  --export-json "${BENCHMARK_OUTPUTS_DIR}/rsdiff_${pair_name}.json" \
                  --export-markdown "${BENCHMARK_OUTPUTS_DIR}/rsdiff_${pair_name}.md" \
                  "rsdiff \"$img1\" \"$img2\" --output rsdiff_${pair_name}_diff.png"
              fi
            fi
          done

          # Fallback: if no pairs found, use first two images
          if [ ! -f "${BENCHMARK_OUTPUTS_DIR}/rsdiff_"*.json ]; then
            echo "No image pairs found, using first two images..."
            IMAGES=($(ls "$IMAGES_DIR"/*.png "$IMAGES_DIR"/*.jpg 2>/dev/null | head -2))
            if [ ${#IMAGES[@]} -ge 2 ]; then
              img1="${IMAGES[0]}"
              img2="${IMAGES[1]}"
              pair_name="$(basename "${img1%.*}")_vs_$(basename "${img2%.*}")"
              echo "Benchmarking: $pair_name"
              
              hyperfine -i \
                --warmup 3 \
                --min-runs 50 \
                --max-runs 100 \
                --export-json "${BENCHMARK_OUTPUTS_DIR}/rsdiff_${pair_name}.json" \
                --export-markdown "${BENCHMARK_OUTPUTS_DIR}/rsdiff_${pair_name}.md" \
                "rsdiff \"$img1\" \"$img2\" --output rsdiff_${pair_name}_diff.png"
            fi
          fi

      - name: Upload rsdiff results
        uses: actions/upload-artifact@v4
        with:
          name: rsdiff-benchmark-results
          path: |
            ${{ env.BENCHMARK_OUTPUTS_DIR }}/rsdiff_*.json
            ${{ env.BENCHMARK_OUTPUTS_DIR }}/rsdiff_*.md
            rsdiff_*_diff.png

  benchmark-odiff:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache hyperfine
        uses: actions/cache@v4
        with:
          path: /tmp/hyperfine
          key: hyperfine-${{ env.HYPERFINE_VERSION }}-linux-musl

      - name: Install hyperfine
        run: sudo cp /tmp/hyperfine/hyperfine /usr/local/bin/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Create benchmark outputs directory
        run: mkdir -p "$BENCHMARK_OUTPUTS_DIR"

      - name: Run odiff benchmarks
        run: |
          echo "🏃 Running odiff benchmarks..."

          # Find image pairs and run benchmarks
          for img1 in "$IMAGES_DIR"/*.png "$IMAGES_DIR"/*.jpg; do
            if [[ -f "$img1" ]]; then
              base_name=$(basename "$img1" | sed 's/\.[^.]*$//')
              # Look for corresponding image with -1 suffix
              img2="$IMAGES_DIR/${base_name%-1}.png"
              if [[ -f "$img2" && "$img1" != "$img2" ]]; then
                pair_name="$(basename "${img1%.*}")_vs_$(basename "${img2%.*}")"
                echo "Benchmarking: $pair_name"
                
                hyperfine -i \
                  --warmup 3 \
                  --min-runs 50 \
                  --max-runs 100 \
                  --export-json "${BENCHMARK_OUTPUTS_DIR}/odiff_${pair_name}.json" \
                  --export-markdown "${BENCHMARK_OUTPUTS_DIR}/odiff_${pair_name}.md" \
                  "node_modules/.bin/odiff --fail-on-layout=false \"$img1\" \"$img2\" odiff_${pair_name}_diff.png"
              fi
            fi
          done

          # Fallback: if no pairs found, use first two images
          if [ ! -f "${BENCHMARK_OUTPUTS_DIR}/odiff_"*.json ]; then
            echo "No image pairs found, using first two images..."
            IMAGES=($(ls "$IMAGES_DIR"/*.png "$IMAGES_DIR"/*.jpg 2>/dev/null | head -2))
            if [ ${#IMAGES[@]} -ge 2 ]; then
              img1="${IMAGES[0]}"
              img2="${IMAGES[1]}"
              pair_name="$(basename "${img1%.*}")_vs_$(basename "${img2%.*}")"
              echo "Benchmarking: $pair_name"
              
              hyperfine -i \
                --warmup 3 \
                --min-runs 50 \
                --max-runs 100 \
                --export-json "${BENCHMARK_OUTPUTS_DIR}/odiff_${pair_name}.json" \
                --export-markdown "${BENCHMARK_OUTPUTS_DIR}/odiff_${pair_name}.md" \
                "node_modules/.bin/odiff --fail-on-layout=false \"$img1\" \"$img2\" odiff_${pair_name}_diff.png"
            fi
          fi

      - name: Upload odiff results
        uses: actions/upload-artifact@v4
        with:
          name: odiff-benchmark-results
          path: |
            ${{ env.BENCHMARK_OUTPUTS_DIR }}/odiff_*.json
            ${{ env.BENCHMARK_OUTPUTS_DIR }}/odiff_*.md
            odiff_*_diff.png

  benchmark-pixelmatch:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache hyperfine
        uses: actions/cache@v4
        with:
          path: /tmp/hyperfine
          key: hyperfine-${{ env.HYPERFINE_VERSION }}-linux-musl

      - name: Install hyperfine
        run: sudo cp /tmp/hyperfine/hyperfine /usr/local/bin/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Create benchmark outputs directory
        run: mkdir -p "$BENCHMARK_OUTPUTS_DIR"

      - name: Run pixelmatch benchmarks
        run: |
          echo "🏃 Running pixelmatch benchmarks..."

          # Find image pairs and run benchmarks
          for img1 in "$IMAGES_DIR"/*.png "$IMAGES_DIR"/*.jpg; do
            if [[ -f "$img1" ]]; then
              base_name=$(basename "$img1" | sed 's/\.[^.]*$//')
              # Look for corresponding image with -1 suffix
              img2="$IMAGES_DIR/${base_name%-1}.png"
              if [[ -f "$img2" && "$img1" != "$img2" ]]; then
                pair_name="$(basename "${img1%.*}")_vs_$(basename "${img2%.*}")"
                echo "Benchmarking: $pair_name"
                
                hyperfine -i \
                  --warmup 3 \
                  --min-runs 50 \
                  --max-runs 100 \
                  --export-json "${BENCHMARK_OUTPUTS_DIR}/pixelmatch_${pair_name}.json" \
                  --export-markdown "${BENCHMARK_OUTPUTS_DIR}/pixelmatch_${pair_name}.md" \
                  "node_modules/.bin/pixelmatch \"$img1\" \"$img2\" --output pixelmatch_${pair_name}_diff.png"
              fi
            fi
          done

          # Fallback: if no pairs found, use first two images
          if [ ! -f "${BENCHMARK_OUTPUTS_DIR}/pixelmatch_"*.json ]; then
            echo "No image pairs found, using first two images..."
            IMAGES=($(ls "$IMAGES_DIR"/*.png "$IMAGES_DIR"/*.jpg 2>/dev/null | head -2))
            if [ ${#IMAGES[@]} -ge 2 ]; then
              img1="${IMAGES[0]}"
              img2="${IMAGES[1]}"
              pair_name="$(basename "${img1%.*}")_vs_$(basename "${img2%.*}")"
              echo "Benchmarking: $pair_name"
              
              hyperfine -i \
                --warmup 3 \
                --min-runs 50 \
                --max-runs 100 \
                --export-json "${BENCHMARK_OUTPUTS_DIR}/pixelmatch_${pair_name}.json" \
                --export-markdown "${BENCHMARK_OUTPUTS_DIR}/pixelmatch_${pair_name}.md" \
                "node_modules/.bin/pixelmatch \"$img1\" \"$img2\" --output pixelmatch_${pair_name}_diff.png"
            fi
          fi

      - name: Upload pixelmatch results
        uses: actions/upload-artifact@v4
        with:
          name: pixelmatch-benchmark-results
          path: |
            ${{ env.BENCHMARK_OUTPUTS_DIR }}/pixelmatch_*.json
            ${{ env.BENCHMARK_OUTPUTS_DIR }}/pixelmatch_*.md
            pixelmatch_*_diff.png
